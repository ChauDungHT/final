@{
    ViewData["Title"] = "Dashboard";
}

<main id="main" class="main">
    <div class="pagetitle">
        <h1>Dashboard</h1>
        <nav>
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a asp-area="" asp-controller="Home" asp-action="Index">Home</a></li>
                <li class="breadcrumb-item active">Dashboard</li>
            </ol>
        </nav>
    </div>

    <section class="section dashboard">
        <div class="row">
            <!-- Reports -->
            <div class="col-8">
                <div class="card">
                    <div class="filter">
                        <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
                        <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                            <li class="dropdown-header text-start">
                                <h6>Filter</h6>
                            </li>
                            <li><a class="dropdown-item" href="#" onclick="loadDashboardData()">Refresh</a></li>
                        </ul>
                    </div>

                    <div class="card-body">
                        <h5 class="card-title">Submission Reports <span>/ Last 7 Days</span></h5>
                        <div id="reportsChart"></div>
                    </div>
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="col-4">
                <div class="card">
                    <div class="filter">
                        <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
                        <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                            <li class="dropdown-header text-start">
                                <h6>Filter</h6>
                            </li>
                            <li><a class="dropdown-item" href="#" onclick="loadDashboardData()">Refresh</a></li>
                        </ul>
                    </div>

                    <div class="card-body">
                        <h5 class="card-title">Recent Activity <span>| Latest Submissions</span></h5>
                        <div class="activity" id="recentActivity">
                            <div class="loading text-center">
                                <i class="bi bi-arrow-clockwise"></i> Loading...
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</main>

<style>
    .loading {
        padding: 40px;
        color: #6c757d;
    }

    .activity-item {
        padding: 15px 0;
        border-bottom: 1px solid #f0f0f0;
    }

    .activity-item:last-child {
        border-bottom: none;
    }

    .activite-label {
        min-width: 60px;
        font-size: 0.85em;
        color: #6c757d;
        margin-right: 15px;
        text-align: right;
    }

    .activity-badge {
        margin-right: 15px;
        margin-top: 5px;
        font-size: 0.6em;
    }

    .activity-content {
        flex: 1;
        font-size: 0.9em;
        line-height: 1.4;
    }

    .activity-content .fw-bold {
        color: #333 !important;
    }
</style>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/apexcharts/3.41.0/apexcharts.min.js"></script>
    <script>
        let reportsChart;

        document.addEventListener("DOMContentLoaded", function () {
            loadDashboardData();
        });

        async function loadDashboardData() {
            try {
                const url = '@Url.Action("GetDashboardData", "EU", new { area = "Admin" })';
                console.log('API URL:', url);

                const response = await fetch(url);

                console.log('Response status:', response.status);
                console.log('Response headers:', response.headers);

                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Error response:', errorText);
                    throw new Error(`HTTP ${response.status}: ${errorText}`);
                }

                const data = await response.json();
                console.log('Raw dashboard data:', data);
                console.log('ChartData:', data.chartData);
                console.log('RecentActivities:', data.recentActivities);

                // Kiểm tra dữ liệu trước khi update
                if (!data.chartData || !Array.isArray(data.chartData)) {
                    throw new Error('Invalid chartData format');
                }

                if (!data.recentActivities || !Array.isArray(data.recentActivities)) {
                    throw new Error('Invalid recentActivities format');
                }

                console.log('Chart data length:', data.chartData.length);
                console.log('Recent activities length:', data.recentActivities.length);

                updateChart(data.chartData);
                updateRecentActivity(data.recentActivities);

            } catch (error) {
                console.error('Error loading dashboard data:', error);
                console.error('Error stack:', error.stack);
                showError(`Error: ${error.message}`);
            }
        }

        function updateChart(chartData) {
            console.log('updateChart called with:', chartData);

            if (!chartData || chartData.length === 0) {
                console.warn('No chart data available');
                return;
            }

            const dates = chartData.map(item => {
                console.log('Processing chart item:', item);
                const date = new Date(item.date);
                return date.toISOString();
            });
            const submissions = chartData.map(item => item.submissions);
            const users = chartData.map(item => item.users);

            console.log('Chart dates:', dates);
            console.log('Chart submissions:', submissions);
            console.log('Chart users:', users);

            if (reportsChart) {
                reportsChart.destroy();
            }

            const options = {
                series: [
                    {
                        name: "Total Submissions",
                        data: submissions
                    },
                    {
                        name: "Total Users",
                        data: users
                    }
                ],
                chart: {
                    height: 350,
                    type: "area",
                    toolbar: {
                        show: false
                    }
                },
                markers: {
                    size: 4
                },
                colors: ["#4154f1", "#2eca6a"],
                fill: {
                    type: "gradient",
                    gradient: {
                        shadeIntensity: 1,
                        opacityFrom: 0.3,
                        opacityTo: 0.4,
                        stops: [0, 90, 100]
                    }
                },
                dataLabels: {
                    enabled: false
                },
                stroke: {
                    curve: "smooth",
                    width: 2
                },
                xaxis: {
                    type: "datetime",
                    categories: dates
                },
                tooltip: {
                    x: {
                        format: "dd/MM/yyyy"
                    }
                },
                legend: {
                    position: 'top',
                    horizontalAlign: 'left'
                }
            };

            console.log('Chart options:', options);

            reportsChart = new ApexCharts(document.querySelector("#reportsChart"), options);
            reportsChart.render();

            console.log('Chart rendered successfully');
        }

        function updateRecentActivity(activities) {
            console.log('updateRecentActivity called with:', activities);

            const activityContainer = document.getElementById('recentActivity');

            if (!activities || activities.length === 0) {
                console.log('No activities to display');
                activityContainer.innerHTML = '<div class="text-center text-muted">No recent activities</div>';
                return;
            }

            let html = '';
            activities.forEach((activity, index) => {
                console.log(`Processing activity ${index}:`, activity);
                html += `
                <div class="activity-item d-flex">
                    <div class="activite-label">${activity.timeAgo}</div>
                    <i class="bi bi-circle-fill activity-badge text-success align-self-start"></i>
                    <div class="activity-content">
                        <span class="fw-bold text-dark">${activity.fullName}</span> - ${activity.exerName}
                    </div>
                </div>
            `;
            });

            console.log('Generated HTML:', html);
            activityContainer.innerHTML = html;
        }

        function showError(message = 'Error loading data') {
            console.error('Showing error:', message);
            document.getElementById('recentActivity').innerHTML =
                `<div class="text-center text-danger">${message}</div>`;
        }
    </script>
}